name: Terraform AKS CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  WORKING_DIR: './envs/dev'

jobs:
  terraform:
    name: 'Deploy AKS Infrastructure'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Azure login using OIDC
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_CONTAINER }}" \
            -backend-config="key=terraform-aks-demo.dev.tfstate"

      # Terraform Plan
      - name: Terraform Plan
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -out=tfplan
        
      # Apply Terraform configuration on main branch
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
        
  deploy:
    name: 'Deploy Application'
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Get AKS & ACR details
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Initialize Terraform to access output values
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_CONTAINER }}" \
            -backend-config="key=terraform-aks-demo.dev.tfstate"
          
          # Get output values
          echo "RG_NAME=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
          echo "AKS_NAME=$(terraform output -raw aks_name)" >> $GITHUB_ENV
          echo "ACR_SERVER=$(terraform output -raw acr_login_server)" >> $GITHUB_ENV
          echo "ACR_NAME=$(echo $(terraform output -raw acr_login_server) | cut -d'.' -f1)" >> $GITHUB_ENV
          
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ env.RG_NAME }} --name ${{ env.AKS_NAME }} --overwrite-existing
          
      - name: Build and push container image
        working-directory: ./workloads/manifests
        run: az acr build --registry ${{ env.ACR_NAME }} --image sample-app:v1 .
          
      - name: Deploy to AKS
        working-directory: ./workloads/manifests
        run: |
          # Update manifest with ACR server
          sed -i "s|\${ACR_LOGIN_SERVER}|${{ env.ACR_SERVER }}|g" sample-app.yaml
          
          # Apply the manifest
          kubectl apply -f sample-app.yaml
